From 4eb869a6f2b1f727cde9894197029c9a6226f52a Mon Sep 17 00:00:00 2001
From: Sajjad Ahmed <sajjad_ahmed@mentor.com>
Date: Fri, 4 Oct 2019 12:18:28 +0500
Subject: [PATCH 4/5] add_tracepoint_layer

---
 mkspecs/features/sa-trace.prf              |  3 +
 src/3rdparty/sa-trace.pri                  |  3 +
 src/3rdparty/sa-trace/qt_tracepoints.c     |  2 +
 src/3rdparty/sa-trace/qt_tracepoints.h     | 89 ++++++++++++++++++++++++++++++
 src/3rdparty/sa-trace/sa-trace.pro         | 19 +++++++
 src/widgets/kernel/qwidgetbackingstore.cpp | 14 +++++
 src/widgets/styles/qstylesheetstyle.cpp    | 13 +++++
 src/widgets/widgets.pro                    |  2 +
 sync.profile                               |  1 +
 9 files changed, 146 insertions(+)
 create mode 100644 mkspecs/features/sa-trace.prf
 create mode 100644 src/3rdparty/sa-trace.pri
 create mode 100644 src/3rdparty/sa-trace/qt_tracepoints.c
 create mode 100644 src/3rdparty/sa-trace/qt_tracepoints.h
 create mode 100644 src/3rdparty/sa-trace/sa-trace.pro

diff --git a/mkspecs/features/sa-trace.prf b/mkspecs/features/sa-trace.prf
new file mode 100644
index 0000000..da2d39d
--- /dev/null
+++ b/mkspecs/features/sa-trace.prf
@@ -0,0 +1,3 @@
+DEFINES += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -lsa-trace -ldl -llttng-ust -lurcu-bp
diff --git a/src/3rdparty/sa-trace.pri b/src/3rdparty/sa-trace.pri
new file mode 100644
index 0000000..bfb6669
--- /dev/null
+++ b/src/3rdparty/sa-trace.pri
@@ -0,0 +1,3 @@
+DEFINES         *= ENABLE_SA_TRACE
+CFLAGS          *= -g3 -O1
+INCLUDEPATH     *= $$PWD/sa-trace
diff --git a/src/3rdparty/sa-trace/qt_tracepoints.c b/src/3rdparty/sa-trace/qt_tracepoints.c
new file mode 100644
index 0000000..121df3d
--- /dev/null
+++ b/src/3rdparty/sa-trace/qt_tracepoints.c
@@ -0,0 +1,2 @@
+#define TRACEPOINT_CREATE_PROBES
+#include "qt_tracepoints.h"
diff --git a/src/3rdparty/sa-trace/qt_tracepoints.h b/src/3rdparty/sa-trace/qt_tracepoints.h
new file mode 100644
index 0000000..e0c49bc
--- /dev/null
+++ b/src/3rdparty/sa-trace/qt_tracepoints.h
@@ -0,0 +1,89 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER         Qt
+
+#undef TRACEPOINT_INCLUDE_FILE
+#define TRACEPOINT_INCLUDE_FILE     ./qt_tracepoints.h
+
+#if !defined(_QT_TRACEPOINTS_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _QT_TRACEPOINTS_H
+
+/* This define will be present exactly once per output library */
+#ifdef QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #define TRACEPOINT_DEFINE
+    #define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#endif
+
+#include <lttng/tracepoint.h>
+#include <stdint.h>
+
+/* Map qt_tracepont to the tracepoint implementation used: */
+#define qt_tracepoint tracepoint
+
+/* Startup Agent, app start stop. */
+TRACEPOINT_EVENT(Qt, qtApplicationCreated,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtQmlResourceLoad,
+                 TP_ARGS(int, isLoading, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isLoading, isLoading)
+                           ctf_string(qmlFileName, qmlFileName)))
+
+/* To show the start & end of Qt QML processing events (1=> Start, 0=> Stop) */
+TRACEPOINT_EVENT(Qt, qtQmlFrameCompile,
+                 TP_ARGS(int, isCompiling, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCompiling, isCompiling) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameCreate,
+                 TP_ARGS(int, isCreating, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCreating,  isCreating) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameBind,
+                 TP_ARGS(int, isBinding, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isBinding,   isBinding) ctf_string(qmlFileName, qmlFileName)))
+
+/* Qt Frame Sync (OpenGL or Raster) */
+TRACEPOINT_EVENT(Qt, qtFrameSync, TP_ARGS(int, isRendering),  TP_FIELDS(ctf_integer(int, isRendering, isRendering)))
+
+/* Qt animation framework timer activity */
+TRACEPOINT_EVENT(Qt, qtAnimDriver, TP_ARGS(int, isActive), TP_FIELDS(ctf_integer(int, isActive, isActive)))
+TRACEPOINT_EVENT(Qt, qtAnimTick, TP_ARGS(int, isUpdating), TP_FIELDS(ctf_integer(int, isUpdating, isUpdating)))
+TRACEPOINT_EVENT(Qt, qtAnimTimingInterval, TP_ARGS(int, interval), TP_FIELDS(ctf_integer(int, interval, interval)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtCoreEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtGraphicsSceneEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt QSendMouseEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtSendMouseEvent, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+TRACEPOINT_EVENT(Qt, qtMouseEventConsumed, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+
+/* Qt NotifyKeyEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtNotifyKeyEvent, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+TRACEPOINT_EVENT(Qt, qtKeyEventConsumed, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+
+/* Qt ImageReader Event (image filename) */
+TRACEPOINT_EVENT(Qt, qtImageReader,
+                 TP_ARGS(int, threadPtr, int, isLoading, const char *, imageName),
+                 TP_FIELDS(ctf_integer(int, threadPtr, threadPtr)
+                           ctf_integer(int, isLoading, isLoading)
+                           ctf_string(imageName, imageName)))
+
+TRACEPOINT_EVENT(Qt, qtStyleSheetPolish,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+#endif /* _QT_TRACEPOINTS_H */
+
+#include <lttng/tracepoint-event.h>
diff --git a/src/3rdparty/sa-trace/sa-trace.pro b/src/3rdparty/sa-trace/sa-trace.pro
new file mode 100644
index 0000000..5bc72fe
--- /dev/null
+++ b/src/3rdparty/sa-trace/sa-trace.pro
@@ -0,0 +1,19 @@
+TARGET = sa-trace
+
+CONFIG += create_prl
+
+load(qt_module)
+
+QT -= core gui
+
+#################################
+
+DEFINES         += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -llttng-ust -lurcu-bp -ldl
+
+#################################
+
+SOURCES = qt_tracepoints.c
+
+HEADERS += qt_tracepoints.h
diff --git a/src/widgets/kernel/qwidgetbackingstore.cpp b/src/widgets/kernel/qwidgetbackingstore.cpp
index 24b8665..475beb5 100644
--- a/src/widgets/kernel/qwidgetbackingstore.cpp
+++ b/src/widgets/kernel/qwidgetbackingstore.cpp
@@ -68,6 +68,10 @@
 #  include <qpa/qplatformnativeinterface.h>
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 extern QRegion qt_dirtyRegion(QWidget *);
@@ -98,6 +102,11 @@ void QWidgetBackingStore::qt_flush(QWidget *widget, const QRegion &region, QBack
     Q_ASSERT(widget);
     Q_ASSERT(backingStore);
     Q_ASSERT(tlw);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
 #if !defined(QT_NO_PAINT_DEBUG)
     static int flushUpdate = qEnvironmentVariableIntValue("QT_FLUSH_UPDATE");
     if (flushUpdate > 0)
@@ -162,6 +171,11 @@ void QWidgetBackingStore::qt_flush(QWidget *widget, const QRegion &region, QBack
     } else
 #endif
         backingStore->flush(effectiveRegion, widget->windowHandle(), offset);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
+
 }
 
 #ifndef QT_NO_PAINT_DEBUG
diff --git a/src/widgets/styles/qstylesheetstyle.cpp b/src/widgets/styles/qstylesheetstyle.cpp
index 28b4c36..eba5832 100644
--- a/src/widgets/styles/qstylesheetstyle.cpp
+++ b/src/widgets/styles/qstylesheetstyle.cpp
@@ -119,6 +119,10 @@
 
 #include <QtGui/qscreen.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 using namespace QCss;
@@ -2803,6 +2807,10 @@ bool QStyleSheetStyle::initObject(const QObject *obj) const
 
 void QStyleSheetStyle::polish(QWidget *w)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 1);
+#endif // ENABLE_SA_TRACE
+
     baseStyle()->polish(w);
     RECURSION_GUARD(return)
 
@@ -2891,6 +2899,11 @@ void QStyleSheetStyle::polish(QWidget *w)
             || (!rule.hasNativeBorder() && !rule.border()->isOpaque()))
             w->setAttribute(Qt::WA_OpaquePaintEvent, false);
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 0);
+#endif // ENABLE_SA_TRACE
+
 }
 
 void QStyleSheetStyle::polish(QApplication *app)
diff --git a/src/widgets/widgets.pro b/src/widgets/widgets.pro
index e556cb8..9d25f0b 100644
--- a/src/widgets/widgets.pro
+++ b/src/widgets/widgets.pro
@@ -30,6 +30,8 @@ qtConfig(graphicseffect) {
     include(effects/effects.pri)
 }
 
+contains(QT_CONFIG, sa-trace):include(../3rdparty/sa-trace.pri)
+
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 contains(DEFINES,QT_EVAL):include($$QT_SOURCE_TREE/src/corelib/eval.pri)
diff --git a/sync.profile b/sync.profile
index a6d0e2a..2aa3ed9 100644
--- a/sync.profile
+++ b/sync.profile
@@ -36,6 +36,7 @@
     "QtZlib" => "!>$basedir/src/corelib;$basedir/src/3rdparty/zlib",
     "QtOpenGLExtensions" => "$basedir/src/openglextensions",
     "QtEglFSDeviceIntegration" => "$basedir/src/plugins/platforms/eglfs",
+    "sa-trace" => "$basedir/src/3rdparty/sa-trace",
 );
 %moduleheaders = ( # restrict the module headers to those found in relative path
     "QtEglFSDeviceIntegration" => "api",
-- 
2.7.4

